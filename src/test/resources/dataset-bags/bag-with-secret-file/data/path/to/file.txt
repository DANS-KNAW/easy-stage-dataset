import Prelude hiding (return, (>>=))
import Data.Char

type Parser a = String -> Consumed a

data Consumed a = Consumed (Reply a)
                | Empty (Reply a)
                deriving Show

data Reply a = Ok a String 
             | Error 
             deriving Show

return :: a -> Parser a
return x = \input -> Empty (Ok x input)

(>>=) :: Parser a -> (a -> Parser b) -> Parser b
p >>= f 
    = \input -> case (p input) of
        Empty reply1 
          -> case reply1 of
               Ok x rest -> ((f x) rest)
               Error -> Empty Error
        Consumed reply1
          -> Consumed
             (case reply1 of
                Ok x rest 
                      -> case ((f x) rest) of
                           Consumed reply2 -> reply2
                           Empty reply2 -> reply2
                Error -> Error)
    

satisfy :: (Char -> Bool) -> Parser Char
satisfy test = \input -> case input of
  [] -> Empty Error
  (c:cs) | test c    -> Consumed (Ok c cs)
         | otherwise -> Empty Error

char :: Char -> Parser Char
char c = satisfy (==c)

letter :: Parser Char
letter = satisfy isAlpha

digit :: Parser Char
digit = satisfy isDigit

(<|>) :: Parser a -> Parser a -> Parser a
p <|> q 
  = \input -> case (p input) of
      Empty Error -> q input
      Empty ok    -> case (q input) of
                       Empty _  -> Empty ok
                       consumed -> consumed
      consumed    -> consumed

string :: String -> Parser ()
string ""     = return ()
string (c:cs) = char c >> string cs

many1 :: Parser a -> Parser [a]
many1 p = p >>= \x -> (many1 p <|> return []) 
            >>= \xs -> return (x:xs)

identifier :: Parser [Char]
identifier = many1 (letter <|> digit <|> char '_')

whitespace = many1 (char ' ' <|> char '\n')

-- unlimited lookahead...
try :: Parser a -> Parser a
try p = \input -> case (p input) of
          Consumed Error -> Empty Error
          other -> other


